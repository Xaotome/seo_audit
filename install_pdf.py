#!/usr/bin/env python3
"""
Installation des d√©pendances pour l'export PDF
"""

import subprocess
import sys
import os

def install_reportlab():
    """Installer ReportLab pour la g√©n√©ration PDF"""
    print("üîß Installation de ReportLab pour l'export PDF...")
    
    try:
        # Essayer d'importer ReportLab
        import reportlab
        print("‚úÖ ReportLab est d√©j√† install√©")
        return True
    except ImportError:
        pass
    
    try:
        # Installer ReportLab
        subprocess.check_call([
            sys.executable, '-m', 'pip', 'install', 
            'reportlab', '--upgrade'
        ])
        
        # V√©rifier l'installation
        import reportlab
        print("‚úÖ ReportLab install√© avec succ√®s !")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation: {e}")
        return False
    except ImportError:
        print("‚ùå Installation √©chou√©e - ReportLab non disponible")
        return False

def test_pdf_generation():
    """Tester la g√©n√©ration PDF"""
    try:
        from seo_audit.pdf_generator import SEOAuditPDFGenerator
        
        # Donn√©es de test
        test_data = {
            'metadata': {
                'domain': 'https://test.example.com',
                'analysis_date': '2024-01-15T10:30:00',
                'total_pages': 5,
                'analysis_id': 'test_audit'
            },
            'summary': {
                'total_pages': 5,
                'pages_with_issues': 2,
                'avg_response_time': 456,
                'total_issues': 8,
                'top_issues': [
                    ['Titre manquant', 2],
                    ['Meta description manquante', 1]
                ],
                'status_codes': {'200': 4, '404': 1}
            },
            'pages': [
                {
                    'url': 'https://test.example.com/',
                    'status': 200,
                    'responseTime': 234,
                    'title': 'Accueil - Test Site',
                    'titleLen': 19,
                    'metaDesc': 'Site de test pour l\'audit SEO',
                    'metaDescLen': 28,
                    'h1Count': 1,
                    'wordCount': 450,
                    'issues': [],
                    'issuesCount': 0,
                    'headingsStructure': [
                        {'level': 1, 'text': 'Bienvenue', 'position': 0},
                        {'level': 2, 'text': '√Ä propos', 'position': 1}
                    ],
                    'headingsHierarchyIssues': [],
                    'imgNoAlt': 0,
                    'linksInternal': 3,
                    'linksExternal': 1,
                    'htmlSize': 12450,
                    'isCompressed': True
                },
                {
                    'url': 'https://test.example.com/about',
                    'status': 200,
                    'responseTime': 367,
                    'title': '',
                    'titleLen': 0,
                    'metaDesc': '',
                    'metaDescLen': 0,
                    'h1Count': 0,
                    'wordCount': 89,
                    'issues': ['Titre manquant', 'H1 manquant', 'Meta description manquante'],
                    'issuesCount': 3,
                    'headingsStructure': [],
                    'headingsHierarchyIssues': ['Aucun titre trouv√©'],
                    'imgNoAlt': 2,
                    'linksInternal': 1,
                    'linksExternal': 0,
                    'htmlSize': 3420,
                    'isCompressed': False
                }
            ]
        }
        
        # G√©n√©rer un PDF de test
        generator = SEOAuditPDFGenerator()
        test_file = 'test_report.pdf'
        
        success = generator.generate_report(test_data, test_file)
        
        if success and os.path.exists(test_file):
            file_size = os.path.getsize(test_file)
            print(f"‚úÖ PDF de test g√©n√©r√© : {test_file} ({file_size} octets)")
            
            # Nettoyer le fichier de test
            os.remove(test_file)
            return True
        else:
            print("‚ùå Erreur lors de la g√©n√©ration du PDF de test")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test PDF: {e}")
        return False

def main():
    """Installation et test des fonctionnalit√©s PDF"""
    print("üöÄ Configuration de l'export PDF pour l'audit SEO\n")
    
    # √âtape 1: Installer ReportLab
    if not install_reportlab():
        print("\n‚ùå Impossible d'installer ReportLab")
        print("Essayez manuellement :")
        print("   pip install reportlab")
        sys.exit(1)
    
    print()
    
    # √âtape 2: Tester la g√©n√©ration PDF
    if not test_pdf_generation():
        print("\n‚ùå Le test de g√©n√©ration PDF a √©chou√©")
        sys.exit(1)
    
    print("\nüéâ Configuration PDF termin√©e avec succ√®s !")
    print("\nüìã Fonctionnalit√©s disponibles :")
    print("   ‚úÖ G√©n√©ration de rapports PDF complets")
    print("   ‚úÖ Export via l'interface web (mode serveur)")
    print("   ‚úÖ Rapports avec r√©sum√© ex√©cutif et d√©tails par page")
    print("   ‚úÖ Structure des titres et recommandations")
    
    print("\nüöÄ Pour utiliser l'export PDF :")
    print("   1. python3 simple_server.py")
    print("   2. Ouvrir http://localhost:8000/index.html")  
    print("   3. Lancer une analyse SEO")
    print("   4. Cliquer sur le bouton 'PDF' pour t√©l√©charger le rapport")
    
    print("\nüí° Le rapport PDF contient :")
    print("   üìÑ Page de couverture avec r√©sum√©")
    print("   üìä R√©sum√© ex√©cutif d√©taill√©")
    print("   üìà Analyse globale et statistiques")
    print("   üîù Top des probl√®mes avec recommandations")
    print("   üìù D√©tail complet de chaque page")
    print("   üéØ Recommandations personnalis√©es")

if __name__ == '__main__':
    main()